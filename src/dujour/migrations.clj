(ns dujour.migrations
  (:require [clojure.java.jdbc :as jdbc]
            [clojure.java.jdbc.sql :as sql]
            [dujour.jdbc.ddl :as ddl])
  (:use [dujour.db]))

(def 20130801-init-dujourdb
  {:id "20130801-init-dujourdb"
   :up init-database!
   :down clear-database!})

(defn clear-database!
  [database]
  (let [ddl-drop-tables
        [(ddl/drop-table :releases),
         (ddl/drop-table :checkins),
         (ddl/drop-table :params)]]
    (apply jdbc/db-do-commands database true ddl-drop-tables)))

(defn init-database!
  [database]
  (let [checkin_id-sql
        (case database-type
          "postgresql" "SERIAL PRIMARY KEY"
          "hsqldb" "INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 0) PRIMARY KEY")
        ddl-create-tables
        [(ddl/create-table :releases
                           [:product "text"]
                           [:version "text"]
                           ["release_date" "TIMESTAMP"]
                           ["link" "text"]
                           ["message" "text"]
                           ["PRIMARY KEY" "(product, version)"]),
         (ddl/create-table :checkins
                           [:checkin_id checkin_id-sql]
                           [:product "text"]
                           [:version "text"]
                           [:timestamp "TIMESTAMP"]
                           [:ip "text"]
                           ["FOREIGN KEY" "(product, version)" "REFERENCES" :releases "(product, version)"
                            "ON DELETE CASCADE"]),
         (ddl/create-table :params
                           [:param "text"]
                           [:value "text"]
                           [:checkin_id "INTEGER" "REFERENCES" "checkins(checkin_id)"
                            "ON DELETE CASCADE"]
                           ["PRIMARY KEY" "(checkin_id, param)"])]]
    (apply jdbc/db-do-commands database true ddl-create-tables)))
