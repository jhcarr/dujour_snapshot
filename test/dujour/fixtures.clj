(ns dujour.fixtures
  (:require [clojure.java.jdbc :as jdbc]
            [clojure.java.jdbc.sql :as sql]
            [dujour.jdbc.ddl :as ddl])
  (:use [dujour.db]
        [dujour.testutils])
  (:use [clojure.test]))

(def ^:dynamic *db* nil)

(defn init!
  [database]
  (let [database-type (:subprotocol database)
        [checkin_id-sql transaction?]
        (case database-type
          "postgresql" ["SERIAL PRIMARY KEY", true]
          "hsqldb" ["INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 0) PRIMARY KEY", false])
        ddl-create-tables
        [(ddl/create-table :releases
                           [:product "text"]
                           [:version "text"]
                           ["release_date" "TIMESTAMP"]
                           ["link" "text"]
                           ["message" "text"]
                           ["PRIMARY KEY" "(product, version)"]),
         (ddl/create-table :checkins
                           [:checkin_id checkin_id-sql]
                           [:product "text"]
                           [:version "text"]
                           [:timestamp "TIMESTAMP"]
                           [:ip "text"]
                           ["FOREIGN KEY" "(product, version)" "REFERENCES" :releases "(product, version)"
                            "ON DELETE CASCADE"]),
         (ddl/create-table :params
                           [:param "text"]
                           [:value "text"]
                           [:checkin_id "INTEGER" "REFERENCES" "checkins(checkin_id)"
                            "ON DELETE CASCADE"]
                           ["PRIMARY KEY" "(checkin_id, param)"])]]
    (apply jdbc/db-do-commands database transaction?
                         ddl-create-tables)))

(defn with-test-database
  [function]
  (binding [*db* (test-db)]
    (clear-db-for-testing! *db*)
    (init! *db*)
    (function)))
